openapi: 3.0.3
info:
  title: Health
  description: |+
    Health project API.

    If endpoint is protected by security component then it may returns 401,

    all endpoints may returns 500 (unhandled error).

    The API has a request limit of 60 requests per minute. If the limit has been reached, then the client will receive an [error "Too many request"](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429).
  version: 1.0.0
servers:
  - url: 'http://localhost:8000/api/v1'
    description: 'Local server'
tags:
  - name: Admin Questionnaries
    description: Operations for Admin questionnaries
  - name: Categories
    description: Operations related to Categories
  - name: Articles
    description: Operations related to Articles
  - name: Auth
    description: Operations related to Authorization
  - name: User
    description: Operations related to User
components:
  schemas:
    HttpError:
      required:
        - type
        - title
        - status
        - detail
        - instance
        - invalid_params
        - additional_params
      properties:
        type:
          type: string
          description: A URI reference [RFC3986] that identifies the problem type.
          example: https://tools.ietf.org/html/rfc2616#section-10
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: Error
        status:
          type: number
          description: The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
          example: 500
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Entity not found
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
          example: '/api/v1/articles/53'
        debug:
          type: object
          description: Present if the server is in debug mode
          properties:
            message:
              type: string
              description: Short description
            trace:
              type: string
              description: Stack trace as string
    PathToFile:
      type: string
      example: http://localhost:8000/storage/somefile.jpg
    CategoryList:
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              articles_count:
                type: integer
              image:
                $ref: '#/components/schemas/PathToFile'
    AdminQuestionnaire:
      properties:
        id:
          type: integer
        article_id:
          type: integer
        questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              is_right_answer:
                type: boolean
              questionnaire_id:
                type: integer
              answers:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    is_right:
                      type: boolean
                    question_id:
                      type: integer
                    count_votes:
                      type: integer
    ArticleList:
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              preview_text:
                type: string
              preview_image:
                $ref: '#/components/schemas/PathToFile'
              category_id:
                type: integer
              favorite:
                type: boolean
              like:
                type: boolean
              recommend:
                type: boolean
              count_likes:
                type: integer
              count_recommends:
                type: integer
        count:
          type: integer
    FavoriteArticlesList:
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              title:
                type: string
              preview_text:
                type: string
              preview_image:
                $ref: '#/components/schemas/PathToFile'
              category_id:
                type: integer
              like:
                type: boolean
              recommend:
                type: boolean
              count_likes:
                type: integer
              count_recommends:
                type: integer
        count:
          type: integer
    ArticleDetail:
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        preview_text:
          type: string
        preview_image:
          $ref: '#/components/schemas/PathToFile'
        category_id:
          type: integer
        favorite:
          type: boolean
        like:
          type: boolean
        recommend:
          type: boolean
        count_likes:
          type: integer
        count_recommends:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedErrorResponse:
      description: Need to HTTP authentificate.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    AccessDeniedErrorResponse:
      description: User have not acces to the resource (resource is not secret).
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    NotFoundErrorResponse:
      description: Requested resource is not exist or is secret
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    ValidationErrorResponse:
      description: Validation failed. The "invalid_params" property contains error information.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
    ServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HttpError'
paths:
  /login:
    post:
      tags:
        - Auth
      summary: login method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 79115846325
                  minimum: 10
                  maximum: 12

      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /register:
    post:
      tags:
        - Auth
      summary: register method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                  example: 79115846325
                  minimum: 10
                  maximum: 12
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /code/verify:
    post:
      tags:
        - Auth
      summary: verify sms code method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 79115846325
                  minimum: 10
                  maximum: 12
                  required: true
                code:
                  type: integer
                  example: 1111
                  minimum: 4
                  maximum: 4
                  required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: string
                example: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6ODAwMFwvYXBpXC92MVwvdXNlcnNcL2xvZ2luIiwiaWF0IjoxNjAwODU4Nzg4LCJleHAiOjE2MDA4NjIzODgsIm5iZiI6MTYwMDg1ODc4OCwianRpIjoiV3NleVhUTXNJUkU5ODczWiIsInN1YiI6MywicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.mJpw-nBGcVsOuAslPuy9qD3R3sTyh7_vjh5ci4QpjQk'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /code/request:
    post:
      tags:
        - Auth
      summary: resend sms code method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 79115846325
                  minimum: 10
                  maximum: 12
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'
  /articles:
    get:
      tags:
        - Articles
      summary: Get articles
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: category_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleList'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /articles/{articleId}:
    get:
      tags:
        - Articles
      summary: Get article by id
      parameters:
        - name: articleId
          in: path
          description: id for article
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetail'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
  /articles/first:
    get:
      tags:
        - Articles
      summary: Get first article
      parameters:
        - name: category_id
          in: query
          description: id for category
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleDetail'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /user/favorites:
    get:
      tags:
        - User
      summary: Get favorite articles
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteArticlesList'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /user/favorites/{articleId}:
    post:
      tags:
        - User
      summary: Add article to favorites
      parameters:
        - name: articleId
          in: path
          description: id for article
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
    delete:
      tags:
        - User
      summary: Delete article from favorites
      parameters:
        - name: articleId
          in: path
          description: id for article
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /user/like/{articleId}:
    post:
      tags:
        - User
      summary: add or delete like for article
      parameters:
        - name: articleId
          in: path
          description: id for article
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  like:
                    type: boolean
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
  /user/recommend/{articleId}:
    post:
      tags:
        - User
      summary: add or delete recommendation for article
      parameters:
        - name: articleId
          in: path
          description: id for article
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  like:
                    type: boolean
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
  /admin/questionnaires:
    get:
      tags:
        - Admin Questionnaries
      summary: Get questinaire
      parameters:
        - name: article_id
          in: query
          description: id for article
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AdminQuestionnaire'
                  - type: array
                    items:
                      type: string
                    example: []

        422:
          $ref: '#/components/responses/ValidationErrorResponse'
    post:
      tags:
        - Admin Questionnaries
      summary: Create questionnaire
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                required:
                  - questions
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      required:
                        - question
                        - answers
                      type: object
                      properties:
                        question:
                          type: string
                        answers:
                          type: array
                          items:
                            required:
                              - title
                              - is_right
                            type: object
                            properties:
                              title:
                                type: string
                              is_right:
                                type: boolean
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminQuestionnaire'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
  /admin/questionnaires/{questionnaire_id}:
    get:
      tags:
        - Admin Questionnaries
      summary: Get questionnaire by id
      parameters:
        - name: questionnaire_id
          in: path
          description: id for questionnaire
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminQuestionnaire'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
    put:
      tags:
        - Admin Questionnaries
      summary: Update question
      parameters:
        - name: questionnaire_id
          in: path
          description: id for questionnaire
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                required:
                  - questions
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      required:
                        - question
                        - delete_flag
                        - answers
                      type: object
                      properties:
                        id:
                          type: integer
                          description: id for edit question
                        delete_flag:
                          type: boolean
                          description: true if need delete question
                        question:
                          type: string
                        answers:
                          type: array
                          items:
                            required:
                              - title
                              - delete_flag
                              - is_right
                            type: object
                            properties:
                              id:
                                type: integer
                                description: id for edit answer
                              title:
                                type: string
                              is_right:
                                type: boolean
                              delete_flag:
                                type: boolean
                                description: true if need delete answer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminQuestionnaire'
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
        422:
          $ref: '#/components/responses/ValidationErrorResponse'
    delete:
      tags:
        - Admin Questionnaries
      summary: Delete question
      parameters:
        - name: questionnaire_id
          in: path
          description: id for questionnaire
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Ok
          content:
            application/json:
              schema:
                { }
        404:
          $ref: '#/components/responses/NotFoundErrorResponse'
